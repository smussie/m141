# We're using version 3.7 of the Docker Compose file format
version: "3.7"

# Define services/containers
services:
  # MySQL container
  # mysql:
  #   # Use mysql:8.0.19 image
  #   image: mysql:8.0.21
  #   container_name: ${BASE_NAME}-mysql
  #   command: --default-authentication-plugin=mysql_native_password
  #   # Connect to "my-network" network, as defined below
  #   networks:
  #     - my-network
  #   ports:
  #     - "3307:3306"
  #   expose:
  #     - "3307"
  #   # Pass a list of environment variables to the container
  #   environment:
  #     MYSQL_ROOT_PASSWORD: "${ROOT_PW}"
  #   volumes:
  #     # named_volume_name : /container/path
  #     - ./bd/dbdata:/var/lib/mysql
  #     - ./mysql-dump:/docker-entrypoint-initdb.d
  #   restart: unless-stopped

  #Mariadb
  maria_db:
    image: mariadb:latest
    container_name: ${BASE_NAME}-mariadb
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "${ROOT_PW}"
    volumes:
      - ${BACKUP_DIR}:/var/lib/mysql
    restart: unless-stopped
    networks:
      - ${INTERN}

  #Postgres
  postgres:
    image: postgres:latest
    container_name: ${BASE_NAME}-postgres
    env_file: .env_postgres
    networks:
      - pg_network
    ports:
      - "5435:5432"
    volumes:
      - ${POSTGRES_DATA_VOLUME}:/data/postgres
    restart: unless-stopped

  # Mongodb
  mongodb:
    image: mongo:latest
    container_name: ${BASE_NAME}-mongodb
    environment:
      - MONGO_INITDB_DATABASE= 'test_db' #database you want to make
    #  - MONGO_INITDB_USERNAME= ${USER}
      - MONGO_INITDB_ROOT_USERNAME= ${USER}
      - MONGO_INITDB_ROOT_PASSWORD= ${PASS}
    networks:
      - ${INTERN}
      - nginx_network
    volumes:
      # seeding script
      - ./docker-entrypoint-initdb.d/mongo-entrypoint:/docker-entrypoint-initdb.d
      # required volume
      - ./bd/mongodb:/data/db
    ports:
      #- '27017-27019:27017-27019'
      - 27017:27017
    restart: unless-stopped

  mongo-express:
    image: mongo-express:latest
    restart: unless-stopped
    ports:
      - 8083:8081
    environment:
      ME_CONFIG_OPTIONS_EDITORTHEME: 'ambiance' #3024-night
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${PASS}
      ME_CONFIG_MONGODB_SERVER: ${BASE_NAME}-mongodb #mongodb
      ME_CONFIG_MONGODB_PORT: "27017"
    depends_on:
      - 'mongodb'
    networks:
      - ${INTERN}

  #pgadmin for postgres
  pgadmin:
    image: dpage/pgadmin4
    container_name: ${BASE_NAME}-pgadmin
    env_file: .env_postgres
    networks:
      - ${INTERN}
      - pg_network
      - nginx_network
    ports:
      - "8082:80"
    volumes:
      - ${PGADMIN_DATA}:/root/.pgadmin
    depends_on:
      - postgres
    restart: unless-stopped

  # phpMyAdmin container
  phpmyadmin:
    # Use phpmyadmin/phpmyadmin:5.0.2 image
    image: phpmyadmin/phpmyadmin:5.0.2
    container_name: ${BASE_NAME}-phpmyadmin
    # Connect to "my-network" network, as defined below
    networks:
      - ${INTERN}
      - nginx_network
    # Map port 8080 on the host to port 80 inside the container
    # Syntax is: "HOST_PORT:CONTAINER_PORT"
    ports:
      - "8080:80"

    # Pass a list of environment variables to the container
    environment:
      PMA_HOST: "${DB_HOST}"

    # Wait for "mysql" container to start first
    depends_on:
      - ${DB_HOST}
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: ${BASE_NAME}-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    networks:
      - ${INTERN}
      - nginx_network

  #flask and uwsgi
  # flaskapp:
  #   build: ./flaskapp
  #   container_name: flask
  #   #command: uwsgi --ini ./uwsgi #flask run --host=0.0.0.0 --port=5000
  #   restart: unless-stopped
  #   environment:
  #     APP_NAME: MyFlaskApp
  #     FLASK_ENV: development
  #   # depends_on:
  #   #   - mysql
  #   ports:
  #     - "5000:5000"
  #   networks:
  #     - ${INTERN}
  #     - nginx_network
  #   volumes:
  #     - './flaskapp:/flaskapp'

  # For nginx
  # nginx:
  #   build: ./nginx
  #   container_name: nginx
  #   restart: unless-stopped
  #   ports:
  #     - "8085:80"
  #     #- "443:443"
  #   networks:
  #     - nginx_network
  #   depends_on:
  #     - phpmyadmin
  #     - adminer
  #     - flaskapp
  #     - pgadmin
  #   volumes:
  #     #- /var/opt/my_website/dist:/usr/share/nginx/html:ro
  #     - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  #     #   - ./data/certbot/conf:/etc/letsencrypt
  #     #   - ./data/certbot/www:/var/www/certbot

# Define networks
networks:
  my-network:
  nginx_network:
    # needs to be created using `docker network create nginx_network`
    # external: true
  pg_network:
    driver: bridge
volumes:
  dbdata:
  postgres:
  pgadmin:
  mysql-dump:
